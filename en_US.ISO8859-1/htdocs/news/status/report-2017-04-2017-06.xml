<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE report PUBLIC "-//FreeBSD//DTD FreeBSD XML Database for
  Status Report//EN"
  "http://www.FreeBSD.org/XML/share/xml/statusreport.dtd" >

<!-- $FreeBSD$ -->

<report>
  <date>
    <month>April-June</month>

    <year>2017</year>
  </date>

  <section>
    <title>Introduction</title>

    <p><strong>This is a draft of the April&ndash;June 2017
      status report.  Please check back after it is finalized, and
      an announcement email is sent to the &os;-Announce mailing
      list.</strong></p>

    <?ignore
    <p>This report covers &os;-related projects between April and
      June 2017.  This is the second of four reports planned for
      2017.</p>

    <p>The second quarter of 2017 was another productive quarter for
      the &os; project and community. [...]</p>

    <p>Thanks to all the reporters for the excellent work!</p>

    <p>The deadline for submissions covering the period from July
      to September 2017 is October 7, 2017.</p>
     ?>
  </section>

  <category>
    <name>team</name>

    <description>&os; Team Reports</description>
  </category>

  <category>
    <name>proj</name>

    <description>Projects</description>
  </category>

  <category>
    <name>kern</name>

    <description>Kernel</description>
  </category>

  <category>
    <name>arch</name>

    <description>Architectures</description>
  </category>

  <category>
    <name>bin</name>

    <description>Userland Programs</description>
  </category>

  <category>
    <name>ports</name>

    <description>Ports</description>
  </category>

  <category>
    <name>doc</name>

    <description>Documentation</description>
  </category>

  <category>
    <name>misc</name>

    <description>Miscellaneous</description>
  </category>

  <project cat='proj'>
    <title>64-bit Inode Numbers</title>

    <contact>
      <person>
	<name>
	  <given>Gleb</given>
	  <common>Kurtsou</common>
	</name>
	<email>gleb@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Kirk</given>
	  <common>McKusick</common>
	</name>
	<email>mckusick@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://reviews.FreeBSD.org/D10439">Phabricator Review</url>
    </links>

    <body>
      <p>The 64-bit inode project was completed and merged into
	&os;&nbsp; 12 on May 23, 2017.  It extends the <tt>ino_t</tt>,
	<tt>dev_t</tt>, and <tt>nlink_t</tt> types to be 64-bit
	integers.  It modifies the <tt>struct dirent</tt> layout to
	add a <tt>d_off</tt> field, increases the size of
	<tt>d_fileno</tt> to 64 bits, increases the size of
	<tt>d_namlen</tt> to 16 bits, and changes the required
	alignment of the structure.  It increases the <tt>struct
	statfs</tt> <tt>f_mntfromname[]</tt> and
	<tt>f_mntonname[]</tt> array lengths from MNAMELEN to
	1024.</p>

      <p>ABI breakage is mitigated by providing compatibility using
	versioned symbols, ingenious use of the existing padding in
	structures, and employing various other tricks.
	Unfortunately, not everything can be fixed, especially outside
	the base system.  For instance, third-party APIs which pass
	<tt>struct stat</tt> as parameters are broken in backward- and
	forward-incompatible ways.</p>

      <p>The ABI for <tt>kinfo</tt> sysctl MIBs is changed in a
	backward-compatible way, but there is no general mechanism to
	handle other sysctl MIBS which return structures where the
	layout has changed.  It was considered that the breakage is
	either in management interfaces, where we usually allow ABI
	slippage, or is not important.</p>

      <p>The layout of <tt>struct xvnode</tt> changed, and no
	compatibility shims are provided.</p>

      <p>For <tt>struct xtty</tt>, the <tt>dev_t tty</tt> device
	member was reduced to be just <tt>uint32_t</tt>.  It was
	decided that maintaining ABI compatability in this case is
	more useful than reporting a 64-bit <tt>dev_t</tt> value, for
	the sake of <tt>pstat</tt>.</p>

      <p>Updating note: strictly follow the instructions in
	<tt>UPDATING</tt>.  Build and install the new kernel with the
	<tt>COMPAT_FREEBSD11</tt> option enabled, then reboot, and
	only then install the new world.</p>

      <p>Credits: The 64-bit inode project, also known as ino64,
	started life many years ago as a project by Gleb Kurtsou
	(gleb).  Kirk McKusick (mckusick) then picked up and updated
	the patch, and acted as a flag-waver.  Feedback, suggestions,
	and discussions were carried by Ed Maste (emaste), John
	Baldwin (jhb), Jilles Tjoelker (jilles), and Rick Macklem
	(rmacklem).  Kris Moore (kris) performed an initial ports
	investigation followed by an exp-run by Antoine Brodin
	(antoine).  Essential and all-embracing testing was done by
	Peter Holm (pho).  The heavy lifting of coordinating all these
	efforts and bringing the project to completion were done by
	Konstantin Belousov (kib).  </p>
    </body>

    <sponsor>
      The FreeBSD Foundation (emaste, kib)
    </sponsor>
  </project>

  <project cat='misc'>
    <title>BSD Meetups at Rennes (France)</title>

    <contact>
      <person>
	<name>
	  <given>Mathieu</given>
	  <common>Kerjouan</common>
	</name>
	<email>contact@steepath.eu</email>
      </person>
    </contact>

    <links>
      <url href="https://www.meetup.com/fr-FR/Meetup-BSD-Rennes/events/239248155/">First Event</url>
      <url href="https://www.meetup.com/fr-FR/Meetup-BSD-Rennes/events/240202297/">Second Event</url>
    </links>

    <body>
      <p>Two meetups dedicated to BSD systems were held in Rennes,
	France.  The first one was hosted in the OVH office in Rennes
	and included presentations on multiple subjects: the
	non-technical history of FreeNAS (presented by olivier@), how
	OVH is using ZFS, an introduction to jails, and a use case for
	BGP/bird on &os;.</p>

      <p> The second meetup, also hosted in the OVH office, presented these
	subjects: how to create a &os; port (presented by jadawin@),
	how OVH is using Finite State Machines for managing their
	storage system, network high-availibility with &os;, and a
	jail tutorial by means of a demonstration running 200 OSFP
	(using <tt>net/bird</tt>) routers using jail and vnets on a
	small PC Engines APU2 system with only 4 CPU cores (1Ghz AMD)
	and 4GB RAM).</p>
    </body>

    <sponsor>OVH</sponsor>
  </project>

  <project cat='ports'>
    <title>New Port: FRRouting</title>

    <contact>
      <person>
	<name>
	  <given>Olivier</given>
	  <common>Cochard-Labb√©</common>
	</name>
	<email>olivier@cochard.me</email>
      </person>
    </contact>

    <links>
      <url href="https://frrouting.org/">FRRouting Home Page</url>
    </links>

    <body>
      <p>FRRouting (FRR), a Quagga fork, is an IP routing protocol
	suite for Linux and Unix platforms which includes protocol
	daemons for BGP, IS-IS, OSPF and RIP (LPD and PIM need to be
	fixed on &os;).  FRR is a Linux Foundation Collaborative
	Project with contributors including 6WIND, Architecture
	Technology Corporation, Big Switch Networks, Cumulus Networks,
	LabN Consulting, NetDEF (OpenSourceRouting), Orange, Volta
	Networks, and other companies.</p>
      </body>

    <sponsor>Orange</sponsor>
  </project>

  <project cat='team'>
    <title>The Postmaster Team</title>

    <contact>
      <person>
	<name>
	  <given>David</given>
	  <common>Wolfskill</common>
	</name>
	<email>dhw@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Larry</given>
	  <common>Rosenman</common>
	</name>
	<email>ler@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Ryan</given>
	  <common>Steinmetz</common>
	</name>
	<email>zi@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Eygene</given>
	  <common>Ryabinkin</common>
	</name>
	<email>rea@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Remko</given>
	  <common>Lodder</common>
	</name>
	<email>remko@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Kurt</given>
	  <common>Jaeger</common>
	</name>
	<email>pi@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.FreeBSD.org/administration.html#t-postmaster">The Postmaster Team</url>
    </links>

    <body>
      <p> Postmaster handles the mail flow for the &os;
	project.</p>

      <p>Clusteradm provides us with four jails: mailman, mailarchive,
	mx1 and mx2.  In addition, there is some part of the setup
	running on freefall.FreeBSD.org.  The system uses
	<tt>postfix</tt>, <tt>mailman</tt>, <tt>spamassassin</tt> and
	some other tools from the ports tree to handle the mailflow.
	We use a very small, non-public Subversion repository for
	parts of the configuration.</p>

      <p>During Q2, Larry Rosenman, Kurt Jaeger, Eygene Ryabinkin,
	Remko Lodder and Ryan Steinmetz joined the Postmaster Team,
	and Florian Smeets left the Postmaster Team.</p>

      <p>Thanks to Florian for his long service in that role!  David
	Wolfskill is planning to leave the role as soon as the new
	team members are settled.  Vsevolod Stakhov plans to provide
	us with support to integrate <tt>rspamd</tt> into the setup.</p>

      <p>The workload for the Postmaster Team is not high, but the
	complexity of the setup has its own demands.</p>
    </body>

    <help>
      <task>We need to improve our internal documentation of workflows and
	processes.</task>

      <task>We should consider adding some monitoring to provide
	quarterly numbers on the mail flow.</task>
    </help>
  </project>

  <project cat='team'>
    <title>&os; Release Engineering Team</title>

    <contact>
      <person>
	<name>&os;&nbsp;Release Engineering Team</name>
	<email>re@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.FreeBSD.org/releases/11.1R/schedule.html">&os;&nbsp;11.1-RELEASE Schedule</url>
      <url href="https://download.FreeBSD.org/ftp/snapshots/ISO-IMAGES/">&os; Development Snapshots</url>
    </links>

    <body>
      <p>The &os; Release Engineering Team is responsible for setting
	and publishing release schedules for official project releases
	of &os;, announcing code freezes, and maintaining the
	respective branches, among other things.</p>

      <p>The &os;&nbsp;11.1-RELEASE cycle started on May 19, and is
	continuing as scheduled.  &os; consumers are urged to test
	whenever possible to help ensure the reliability and stability
	of the upcoming second release from the <tt>stable/11</tt>
	branch.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>
  </project>

  <project cat='bin'>
    <title>Using LLVM's LLD Linker as &os;'s System Linker</title>

    <contact>
      <person>
	<name>
	  <given>Rafael</given>
	  <common>Esp√≠ndola</common>
	</name>
	<email>rafael.espindola@gmail.com</email>
      </person>

      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/LLD">&os; <tt>lld</tt> Wiki Page</url>
      <url href="http://llvm.org/pr23214">&os;/LLD Tracking PR (LLVM Bugzilla)</url>
      <url href="https://bugs.FreeBSD.org/214864"> Exp-Run Request Using <tt>lld</tt> as <tt>/usr/bin/ld</tt></url>
    </links>

    <body>
      <p>LLD is the linker in the LLVM family of projects.  It is a
	high-performance linker that supports the ELF, COFF and
	Mach-O object formats.  It is broadly compatible with the
	common linkers used for each file format.  For ELF this is
	the GNU Binary File Descriptor (BFD) <tt>ld</tt> and GNU
	<tt>gold</tt>.  However, LLD's authors are not constrained
	by strict compatibility where it would hamper performance or
	desired functionality.</p>

      <p>LLD is now used as the default system linker for
	&os;/arm64 and can link a working kernel, modules, and
	userland for &os;/amd64.  LLD can also link a working
	kernel and modules (but not userland) for &os;/arm and
	&os;/i386.</p>

      <p>Work is ongoing to address ports that do not build with LLD
	as the system linker (either by fixing the port, or
	configuring the port to be linked by GNU <tt>ld</tt>).</p>

      <p>For &os; 12.0 we expect to use LLD as the system linker for
	the same set of architectures that use Clang by default:
	32- and 64-bit arm and x86.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>

    <help>
      <task>Fix <tt>libtool</tt> to detect LLD and pass the same
	command line arguments as for GNU <tt>ld</tt> and
	<tt>gold</tt>.</task>

      <task>Investigate remaining amd64 and arm64 port
	build failures.</task>

      <task>Investigate and improve LLD on i386 and arm, before
	the creation of the stable/12 branch.</task>

      <task>Investigate and improve LLD on all other
	architectures.</task>

      <task>Extensive testing.</task>
    </help>
  </project>

  <project cat='bin'>
    <title>DTC</title>

    <contact>
      <person>
	<name>
	  <given>Emmanuel</given>
	  <common>Vadot</common>
	</name>
	<email>manu@FreeBSD.org</email>
      </person>
    </contact>


    <body>
      <p>The in-tree DTC (Device Tree Compilator) was switched to use the
	BSD-licensed version by default.  (The previous default DTC is
	licensed under the GPL.) The current version supports overlays
	and is able to compile every DTS used by the &os; arm
	releases.  The ports GPL version was updated to the latest
	release (1.4.4).  The in-tree GPL version is still present and
	the goal is to remove it before &os; 12.0.</p>
    </body>
  </project>

  <project cat='proj'>
    <title>DTS Updates</title>

    <contact>
      <person>
	<name>
	  <given>Emmanuel</given>
	  <common>Vadot</common>
	</name>
	<email>manu@FreeBSD.org</email>
      </person>
    </contact>


    <body>
      <p>DTS (Device Tree Source) files provide a human-readable
	source description of the hardware resources for a given
	computer system (such as ARM- or MIPS-based embedded boards).
	The DTS source representation must be compiled into a binary
	format in order to be linked into the kernel and used to
	locate devices at runtime.</p>

      <p>The DTS files in &os; were updated to match the versions from
	Linux 4.11, to represent more modern devices and provide more
	accurate representations.</p>
    </body>
  </project>

  <project cat='ports'>
    <title>Updating Port Metadata for non-x86 Architectures</title>

    <contact>
      <person>
	<name>
	  <given>Mark</given>
	  <common>Linimon</common>
	</name>
	<email>linimon@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://thunderx1.nyi.FreeBSD.org/jail.html?mastername=110arm64-default">aarch64 Poudriere Machine</url>
      <url href="http://beefy8.nyi.FreeBSD.org/jail.html?mastername=head-armv6-default">armv6 Poudriere Machine</url>
    </links>

    <body>
      <p>I have been analyzing the error logs from ports builds for
	all non-x86 architectures, including both the logs published
	on the package build cluster and also other builds of
	powerpc64 and sparc64.</p>

      <p>From this analysis, I have marked almost all the failing
	ports as either <tt>BROKEN</tt> or
	<tt>NOT_FOR</tt>/<tt>ONLY_FOR</tt>, as appropriate.</p>

      <p>The intent of this work is not to make life harder for
	anyone, but rather, in fact, the opposite.  With these
	definitions in place, it is possible to scan the poudriere
	bulk build output (the &quot;Ignored ports&quot; portion, in
	particular) and see quickly what ports are failing to build
	and why.  Previously, finding the exact reason why a build
	failed needed some research (<tt>portsmon</tt> only models
	failure messages on amd64).  Additionally, it is extremely
	difficult to work through several hundred logs that simply say
	&quot;failed to compile&quot;, &quot;failed to link&quot;, and
	so forth.</p>

      <p>This is part of an effort to identify where we need further
	work to bring sufficient Ports Collection support to, e.g.,
	armv6 and aarch64 to bring them closer to true Tier-1
	status.</p>

      <p>To further facilitate locating patterns in the Poudriere
	output, I have begun reworking some existing
	<tt>BROKEN</tt>/<tt>NOT_FOR</tt>/<tt>ONLY_FOR</tt> messages so
	that they will sort more easily.  This includes sorting the
	order of the <tt>ARCH</tt> definitions.</p>

      <p>Many people have been doing great work on fixing the
	individual ports.  I hope that my work makes their jobs
	somewhat easier.</p>
    </body>
  </project>

  <project cat='kern'>
    <title>&os; Driver for the Annapurna Labs ENA</title>

    <contact>
      <person>
	<name>
	  <given>Marcin</given>
	  <common>Wojtas</common>
	</name>
	<email>mw@semihalf.com</email>
      </person>

      <person>
	<name>
	  <given>Micha≈Ç</given>
	  <common>Krawczyk</common>
	</name>
	<email>mk@semihalf.com</email>
      </person>
    </contact>

    <links>
      <url href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking.html">Enhanced Networking Guide</url>
    </links>

    <body>
      <p>ENA (Elastic Network Adapter) is a 25G SmartNIC developed by
	Annapurna Labs and is based on a custom ARMv8 chip.  This is a
	high performance networking card available in AWS offering.
	It introduces enhancements in network utilization scalability
	on EC2 machines under control of various operating systems, in
	particular &os;.</p>

      <p>The goal of &os; enablement is to provide top performance and
	a wide range of monitoring and management features such
	as:</p>

      <ul>
	<li>multiple queue modes</li>

	<li>hardware offloads (rx and tx checksum)</li>

	<li>admin queue</li>

	<li>asynchronous notifications</li>

	<li>robust hardware access</li>

	<li>a scalable number of MSI-X vectors</li>

	<li>hardware counters</li>

	<li>watchdog mechanism</li>

	<li>LRO</li>

	<li>RSS</li>
      </ul>

      <p>The driver is now available in kernel source tree since
	r318647.</p>
    </body>

    <sponsor>Annapurna Labs &mdash; an Amazon company</sponsor>

    <help>
      <task>Add RSS configuration from userspace (sysctls).</task>

      <task>Add support for LLQ mechanisms.</task>
    </help>
  </project>
</report>
