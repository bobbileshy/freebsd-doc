<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE report PUBLIC "-//FreeBSD//DTD FreeBSD XML Database for
  Status Report//EN"
  "http://www.FreeBSD.org/XML/share/xml/statusreport.dtd" >

<!-- $FreeBSD$ -->

<report>
  <date>
    <month>April-June</month>

    <year>2017</year>
  </date>

  <section>
    <title>Introduction</title>

    <p><strong>This is a draft of the April&ndash;June 2017
      status report.  Please check back after it is finalized, and
      an announcement email is sent to the &os;-Announce mailing
      list.</strong></p>

    <?ignore
    <p>This report covers &os;-related projects between April and
      June 2017.  This is the second of four reports planned for
      2017.</p>

    <p>The second quarter of 2017 was another productive quarter for
      the &os; project and community. [...]</p>

    <p>Thanks to all the reporters for the excellent work!</p>

    <p>The deadline for submissions covering the period from July
      to September 2017 is October 7, 2017.</p>
     ?>
  </section>

  <category>
    <name>team</name>

    <description>&os; Team Reports</description>
  </category>

  <category>
    <name>proj</name>

    <description>Projects</description>
  </category>

  <category>
    <name>kern</name>

    <description>Kernel</description>
  </category>

  <category>
    <name>arch</name>

    <description>Architectures</description>
  </category>

  <category>
    <name>bin</name>

    <description>Userland Programs</description>
  </category>

  <category>
    <name>ports</name>

    <description>Ports</description>
  </category>

  <category>
    <name>doc</name>

    <description>Documentation</description>
  </category>

  <category>
    <name>misc</name>

    <description>Miscellaneous</description>
  </category>

  <project cat='proj'>
    <title>64-bit Inode Numbers</title>

    <contact>
      <person>
	<name>
	  <given>Gleb</given>
	  <common>Kurtsou</common>
	</name>
	<email>gleb@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Konstantin</given>
	  <common>Belousov</common>
	</name>
	<email>kib@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Kirk</given>
	  <common>McKusick</common>
	</name>
	<email>mckusick@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://reviews.FreeBSD.org/D10439">Phabricator Review</url>
    </links>

    <body>
      <p>The 64-bit inode project was completed and merged into
	&os;&nbsp; 12 on May 23, 2017.  It extends the <tt>ino_t</tt>,
	<tt>dev_t</tt>, and <tt>nlink_t</tt> types to be 64-bit
	integers.  It modifies the <tt>struct dirent</tt> layout to
	add a <tt>d_off</tt> field, increases the size of
	<tt>d_fileno</tt> to 64 bits, increases the size of
	<tt>d_namlen</tt> to 16 bits, and changes the required
	alignment of the structure.  It increases the <tt>struct
	statfs</tt> <tt>f_mntfromname[]</tt> and
	<tt>f_mntonname[]</tt> array lengths from MNAMELEN to
	1024.</p>

      <p>ABI breakage is mitigated by providing compatibility using
	versioned symbols, ingenious use of the existing padding in
	structures, and employing various other tricks.
	Unfortunately, not everything can be fixed, especially outside
	the base system.  For instance, third-party APIs which pass
	<tt>struct stat</tt> as parameters are broken in backward- and
	forward-incompatible ways.</p>

      <p>The ABI for <tt>kinfo</tt> sysctl MIBs is changed in a
	backward-compatible way, but there is no general mechanism to
	handle other sysctl MIBS which return structures where the
	layout has changed.  It was considered that the breakage is
	either in management interfaces, where we usually allow ABI
	slippage, or is not important.</p>

      <p>The layout of <tt>struct xvnode</tt> changed, and no
	compatibility shims are provided.</p>

      <p>For <tt>struct xtty</tt>, the <tt>dev_t tty</tt> device
	member was reduced to be just <tt>uint32_t</tt>.  It was
	decided that maintaining ABI compatability in this case is
	more useful than reporting a 64-bit <tt>dev_t</tt> value, for
	the sake of <tt>pstat</tt>.</p>

      <p>Updating note: <strong>strictly</strong> follow the instructions
	in <tt>UPDATING</tt>.  Build and install the new kernel with the
	<tt>COMPAT_FREEBSD11</tt> option enabled, then reboot, and
	only then install the new world.</p>

      <p>Credits: The 64-bit inode project, also known as ino64,
	started life many years ago as a project by Gleb Kurtsou
	(gleb).  Kirk McKusick (mckusick) then picked up and updated
	the patch, and acted as a flag-waver.  Feedback, suggestions,
	and discussions were carried by Ed Maste (emaste), John
	Baldwin (jhb), Jilles Tjoelker (jilles), and Rick Macklem
	(rmacklem).  Kris Moore (kris) performed an initial ports
	investigation followed by an exp-run by Antoine Brodin
	(antoine).  Essential and all-embracing testing was done by
	Peter Holm (pho).  The heavy lifting of coordinating all these
	efforts and bringing the project to completion were done by
	Konstantin Belousov (kib).  </p>
    </body>

    <sponsor>
      The FreeBSD Foundation (emaste, kib)
    </sponsor>
  </project>

  <project cat='misc'>
    <title>BSD Meetups at Rennes (France)</title>

    <contact>
      <person>
	<name>
	  <given>Mathieu</given>
	  <common>Kerjouan</common>
	</name>
	<email>contact@steepath.eu</email>
      </person>
    </contact>

    <links>
      <url href="https://www.meetup.com/fr-FR/Meetup-BSD-Rennes/events/239248155/">First Event</url>
      <url href="https://www.meetup.com/fr-FR/Meetup-BSD-Rennes/events/240202297/">Second Event</url>
    </links>

    <body>
      <p>Two meetups dedicated to BSD systems were held in Rennes,
	France.  The first one was hosted in the OVH office in Rennes
	and included presentations on multiple subjects: the
	non-technical history of FreeNAS (presented by olivier@), how
	OVH is using ZFS, an introduction to jails, and a use case for
	BGP/bird on &os;.</p>

      <p> The second meetup, also hosted in the OVH office, presented these
	subjects: how to create a &os; port (presented by jadawin@),
	how OVH is using Finite State Machines for managing their
	storage system, network high-availibility with &os;, and a
	jail tutorial by means of a demonstration running 200 OSFP
	(using <tt>net/bird</tt>) routers using jail and vnets on a
	small PC Engines APU2 system with only 4 CPU cores (1Ghz AMD)
	and 4GB RAM).</p>
    </body>

    <sponsor>OVH</sponsor>
  </project>

  <project cat='ports'>
    <title>New Port: FRRouting</title>

    <contact>
      <person>
	<name>
	  <given>Olivier</given>
	  <common>Cochard-Labb√©</common>
	</name>
	<email>olivier@cochard.me</email>
      </person>
    </contact>

    <links>
      <url href="https://frrouting.org/">FRRouting Home Page</url>
    </links>

    <body>
      <p>FRRouting (FRR), a Quagga fork, is an IP routing protocol
	suite for Linux and Unix platforms which includes protocol
	daemons for BGP, IS-IS, OSPF and RIP (LPD and PIM need to be
	fixed on &os;).  FRR is a Linux Foundation Collaborative
	Project with contributors including 6WIND, Architecture
	Technology Corporation, Big Switch Networks, Cumulus Networks,
	LabN Consulting, NetDEF (OpenSourceRouting), Orange, Volta
	Networks, and other companies.</p>
      </body>

    <sponsor>Orange</sponsor>
  </project>

  <project cat='team'>
    <title>The Postmaster Team</title>

    <contact>
      <person>
	<name>
	  <given>David</given>
	  <common>Wolfskill</common>
	</name>
	<email>dhw@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Larry</given>
	  <common>Rosenman</common>
	</name>
	<email>ler@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Ryan</given>
	  <common>Steinmetz</common>
	</name>
	<email>zi@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Eygene</given>
	  <common>Ryabinkin</common>
	</name>
	<email>rea@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Remko</given>
	  <common>Lodder</common>
	</name>
	<email>remko@FreeBSD.org</email>
      </person>
      <person>
	<name>
	  <given>Kurt</given>
	  <common>Jaeger</common>
	</name>
	<email>pi@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.FreeBSD.org/administration.html#t-postmaster">The Postmaster Team</url>
    </links>

    <body>
      <p> Postmaster handles the mail flow for the &os;
	project.</p>

      <p>Clusteradm provides us with four jails: mailman, mailarchive,
	mx1 and mx2.  In addition, there is some part of the setup
	running on freefall.FreeBSD.org.  The system uses
	<tt>postfix</tt>, <tt>mailman</tt>, <tt>spamassassin</tt> and
	some other tools from the ports tree to handle the mailflow.
	We use a very small, non-public Subversion repository for
	parts of the configuration.</p>

      <p>During Q2, Larry Rosenman, Kurt Jaeger, Eygene Ryabinkin,
	Remko Lodder and Ryan Steinmetz joined the Postmaster Team,
	and Florian Smeets left the Postmaster Team.</p>

      <p>Thanks to Florian for his long service in that role!  David
	Wolfskill is planning to leave the role as soon as the new
	team members are settled.  Vsevolod Stakhov plans to provide
	us with support to integrate <tt>rspamd</tt> into the setup.</p>

      <p>The workload for the Postmaster Team is not high, but the
	complexity of the setup has its own demands.</p>
    </body>

    <help>
      <task>We need to improve our internal documentation of workflows and
	processes.</task>

      <task>We should consider adding some monitoring to provide
	quarterly numbers on the mail flow.</task>
    </help>
  </project>

  <project cat='team'>
    <title>&os; Release Engineering Team</title>

    <contact>
      <person>
	<name>&os;&nbsp;Release Engineering Team</name>
	<email>re@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.FreeBSD.org/releases/11.1R/schedule.html">&os;&nbsp;11.1-RELEASE Schedule</url>
      <url href="https://download.FreeBSD.org/ftp/snapshots/ISO-IMAGES/">&os; Development Snapshots</url>
    </links>

    <body>
      <p>The &os; Release Engineering Team is responsible for setting
	and publishing release schedules for official project releases
	of &os;, announcing code freezes, and maintaining the
	respective branches, among other things.</p>

      <p>The &os;&nbsp;11.1-RELEASE cycle started on May 19, and is
	continuing as scheduled.  &os; consumers are urged to test
	whenever possible to help ensure the reliability and stability
	of the upcoming second release from the <tt>stable/11</tt>
	branch.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>
  </project>

  <project cat='bin'>
    <title>Using LLVM's LLD Linker as &os;'s System Linker</title>

    <contact>
      <person>
	<name>
	  <given>Rafael</given>
	  <common>Esp√≠ndola</common>
	</name>
	<email>rafael.espindola@gmail.com</email>
      </person>

      <person>
	<name>
	  <given>Ed</given>
	  <common>Maste</common>
	</name>
	<email>emaste@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/LLD">&os; <tt>lld</tt> Wiki Page</url>
      <url href="http://llvm.org/pr23214">&os;/LLD Tracking PR (LLVM Bugzilla)</url>
      <url href="https://bugs.FreeBSD.org/214864"> Exp-Run Request Using <tt>lld</tt> as <tt>/usr/bin/ld</tt></url>
    </links>

    <body>
      <p>LLD is the linker in the LLVM family of projects.  It is a
	high-performance linker that supports the ELF, COFF and
	Mach-O object formats.  It is broadly compatible with the
	common linkers used for each file format.  For ELF this is
	the GNU Binary File Descriptor (BFD) <tt>ld</tt> and GNU
	<tt>gold</tt>.  However, LLD's authors are not constrained
	by strict compatibility where it would hamper performance or
	desired functionality.</p>

      <p>LLD is now used as the default system linker for
	&os;/arm64 and can link a working kernel, modules, and
	userland for &os;/amd64.  LLD can also link a working
	kernel and modules (but not userland) for &os;/arm and
	&os;/i386.</p>

      <p>Work is ongoing to address ports that do not build with LLD
	as the system linker (either by fixing the port, or
	configuring the port to be linked by GNU <tt>ld</tt>).</p>

      <p>For &os; 12.0 we expect to use LLD as the system linker for
	the same set of architectures that use Clang by default:
	32- and 64-bit arm and x86.</p>
    </body>

    <sponsor>The &os; Foundation</sponsor>

    <help>
      <task>Fix <tt>libtool</tt> to detect LLD and pass the same
	command line arguments as for GNU <tt>ld</tt> and
	<tt>gold</tt>.</task>

      <task>Investigate remaining amd64 and arm64 port
	build failures.</task>

      <task>Investigate and improve LLD on i386 and arm, before
	the creation of the stable/12 branch.</task>

      <task>Investigate and improve LLD on all other
	architectures.</task>

      <task>Extensive testing.</task>
    </help>
  </project>

  <project cat='bin'>
    <title>DTC</title>

    <contact>
      <person>
	<name>
	  <given>Emmanuel</given>
	  <common>Vadot</common>
	</name>
	<email>manu@FreeBSD.org</email>
      </person>
    </contact>


    <body>
      <p>The in-tree DTC (Device Tree Compilator) was switched to use the
	BSD-licensed version by default.  (The previous default DTC is
	licensed under the GPL.) The current version supports overlays
	and is able to compile every DTS used by the &os; arm
	releases.  The ports GPL version was updated to the latest
	release (1.4.4).  The in-tree GPL version is still present but
	the goal is to remove it before &os; 12.0.</p>
    </body>
  </project>

  <project cat='proj'>
    <title>DTS Updates</title>

    <contact>
      <person>
	<name>
	  <given>Emmanuel</given>
	  <common>Vadot</common>
	</name>
	<email>manu@FreeBSD.org</email>
      </person>
    </contact>


    <body>
      <p>DTS (Device Tree Source) files provide a human-readable
	source description of the hardware resources for a given
	computer system (such as ARM- or MIPS-based embedded boards).
	The DTS source representation must be compiled into a binary
	format in order to be linked into the kernel and used to
	locate devices at runtime.</p>

      <p>The DTS files in &os; were updated to match the versions from
	Linux 4.11, to represent more modern devices and provide more
	accurate representations.</p>
    </body>
  </project>

  <project cat='ports'>
    <title>Updating Port Metadata for non-x86 Architectures</title>

    <contact>
      <person>
	<name>
	  <given>Mark</given>
	  <common>Linimon</common>
	</name>
	<email>linimon@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://thunderx1.nyi.FreeBSD.org/jail.html?mastername=110arm64-default">aarch64 Poudriere Machine</url>
      <url href="http://beefy8.nyi.FreeBSD.org/jail.html?mastername=head-armv6-default">armv6 Poudriere Machine</url>
    </links>

    <body>
      <p>I have been analyzing the error logs from ports builds for
	all non-x86 architectures, including both the logs published
	on the package build cluster and also other builds of
	powerpc64 and sparc64.</p>

      <p>From this analysis, I have marked almost all the failing
	ports as either <tt>BROKEN</tt> or
	<tt>NOT_FOR</tt>/<tt>ONLY_FOR</tt>, as appropriate.</p>

      <p>The intent of this work is not to make life harder for
	anyone, but rather, in fact, the opposite.  With these
	definitions in place, it is possible to scan the poudriere
	bulk build output (the &quot;Ignored ports&quot; portion, in
	particular) and see quickly what ports are failing to build
	and why.  Previously, finding the exact reason why a build
	failed needed some research (<tt>portsmon</tt> only models
	failure messages on amd64).  Additionally, it is extremely
	difficult to work through several hundred logs that simply say
	&quot;failed to compile&quot;, &quot;failed to link&quot;, and
	so forth.</p>

      <p>This is part of an effort to identify where we need further
	work to bring sufficient Ports Collection support to, e.g.,
	armv6 and aarch64 to bring them closer to true Tier-1
	status.</p>

      <p>To further facilitate locating patterns in the Poudriere
	output, I have begun reworking some existing
	<tt>BROKEN</tt>/<tt>NOT_FOR</tt>/<tt>ONLY_FOR</tt> messages so
	that they will sort more easily.  This includes sorting the
	order of the <tt>ARCH</tt> definitions.</p>

      <p>Many people have been doing great work on fixing the
	individual ports.  I hope that my work makes their jobs
	somewhat easier.</p>
    </body>
  </project>

  <project cat='kern'>
    <title>&os; Driver for the Annapurna Labs ENA</title>

    <contact>
      <person>
	<name>
	  <given>Marcin</given>
	  <common>Wojtas</common>
	</name>
	<email>mw@semihalf.com</email>
      </person>

      <person>
	<name>
	  <given>Micha≈Ç</given>
	  <common>Krawczyk</common>
	</name>
	<email>mk@semihalf.com</email>
      </person>
    </contact>

    <links>
      <url href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking.html">Enhanced Networking Guide</url>
    </links>

    <body>
      <p>ENA (Elastic Network Adapter) is a 25G SmartNIC developed by
	Annapurna Labs and is based on a custom ARMv8 chip.  This is a
	high performance networking card available in the AWS offering.
	It introduces enhancements in network utilization scalability
	on EC2 machines under control of various operating systems, in
	particular &os;.</p>

      <p>The goal of &os; enablement is to provide top performance and
	a wide range of monitoring and management features such
	as:</p>

      <ul>
	<li>multiple queue modes</li>

	<li>hardware offloads (rx and tx checksum)</li>

	<li>admin queue</li>

	<li>asynchronous notifications</li>

	<li>robust hardware access</li>

	<li>a scalable number of MSI-X vectors</li>

	<li>hardware counters</li>

	<li>watchdog mechanism</li>

	<li>LRO</li>

	<li>RSS</li>
      </ul>

      <p>The driver is available in the kernel source tree as of
	r318647.</p>
    </body>

    <sponsor>Annapurna Labs &mdash; an Amazon company</sponsor>

    <help>
      <task>Add RSS configuration from userspace (sysctls).</task>

      <task>Add support for LLQ mechanisms.</task>
    </help>
  </project>

  <project cat='doc'>
    <title>Absolute &os;, 3rd Edition</title>

    <contact>
      <person>
	<name>
	  <given>Michael</given>
	  <common>Lucas</common>
	</name>
	<email>mwlucas@michaelwlucas.com</email>
      </person>
    </contact>

    <links>
      <url href="https://blather.michaelwlucas.com/archives/2972">Status as of 30 June</url>
      <url href="https://www.michaelwlucas.com/os/af2e">Second Edition</url>
      <url href="https://twitter.com/search?q=%23af3e&amp;src=typd">Trivial Updates</url>
    </links>

    <body>
      <p>I'm working on a third edition of <i>Absolute &os;</i>. This
	will be a nearly complete rewrite, thanks to the addition of
	little details like ZFS, GPT, <tt>dma</tt>, GELI, new boot
	stuff, disk labeling, <tt>pkg(8)</tt>, <tt>blacklistd</tt>,
	jails, etc..</p>

      <p>My current (delusional) plan is to have a first draft
	finished by the end of October 2017, so we can have print
	copies for BSDCan 2018.</p>
    </body>

    <help>
      <task>Write the remaining 75% of the book.</task>
    </help>
  </project>

  <project cat="kern">
    <title>pNFS Server Plan B</title>

    <contact>
      <person>
	<name>
	  <given>Rick</given>
	  <common>Macklem</common>
	</name>
	<email>rmacklem@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://people.FreeBSD.org/~rmacklem/pnfs-planb-setup.txt">Testing Instructions</url>
    </links>

    <body>
      <p>Parallel NFS (pNFS) is an extension to the NFSv4 protocol that
	allows for file accesses within a single logical mount to be
	performed against multiple file servers, with the potential
	for data access to occur in parallel.  The pNFS
	&quot;layout&quot; in use specifies how the division occurs, with
	metadata operations occurring against the main server, and
	bulk data operations (read/write/setattr/etc.) occurring via
	a layout-specific scheme between the client and data
	servers.</p>

      <p>My first attempt at a pNFS server using GlusterFS was a dud.
	It worked, but performance was so poor that it was not
	usable.  This attempt that I call &quot;Plan B&quot;, only
	uses &os;, with one &os; server handling the metadata
	operations and multiple &os; servers configured to serve
	data, is now ready for third party testing.  If testing by
	third parties goes well, I anticipate the code will be
	merged into &os; head in time for &os;&nbsp;12.  Fairly
	recent &os; or Linux systems should be usable as pNFS
	clients for testing.  This server supports the File Layout,
	which is supported by both of these clients.</p>

      <p>There is no support for the Flex Files Layout or mirroring
	at this time.  I hope to use the Flex Files Layout to add
	mirroring support over the next year or so.  Striping is not
	supported, and I have no plans for implementing this at the
	moment.</p>

      <p>The patched &os; sources may now be accessed for testing
	via either Subversion or download of a gzipped tarball.
	They consist of a patched kernel plus nfsd daemon and can be
	used on any &os;&nbsp;11 or later system.</p>
    </body>

    <help>
      <task>Testing by others will be needed, now that the code is
	available.</task>
    </help>
  </project>

  <project cat='doc'>
    <title>New Xen Handbook Section</title>

    <contact>
      <person>
	<name>
	  <given>Benedict</given>
	  <common>Reuschling</common>
	</name>
	<email>bcr@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="https://www.FreeBSD.org/doc/en_US.ISO8859-1/books/handbook/virtualization-host-xen.html">Handbook Section About &os; as a Xen Host</url>
      <url href="https://reviews.freebsd.org/D10774">Original Phabricator Review</url>
    </links>

    <body>
      <p>&os; supports the Xen hypervisor, with DomU support since
	&os;&nbsp;8.0 and Dom0 available since &os;&nbsp;11.0.  The
	&os; Handbook was lacking instructions on how to run a Xen
	host and VMs.  The steps were outlined in the &os; wiki, but
	needed some extra bits of text from the upstream Xen wiki in
	order to form a complete guide.  The new handbook section
	briefly explains what Xen is, how it differs from other
	hypervisors, and what features are currently available in
	&os;.  It then goes on to describe how to set up the Dom0, as
	well as detailing the guest VM support known as DomU.</p>

      <p>Reviewers Nikolai Lifanov, Roger Pau Monn√©, and Warren Block
	provided valuable feedback on the initial version in
	Phabricator.  Additional corrections were found by Bj√∂rn
	Heidotting while translating the section into German.</p>
    </body>

    <help>
      <task>More options for the Dom0 and DomU could be provided.</task>

      <task>People should test these instructions on their hardware
	and provide feedback.  This would also help us get better
	testing of the Xen port for &os;.</task>
    </help>
  </project>

  <project cat='ports'>
    <title>Xfce on &os;</title>

    <contact>
      <person>
	<name>&os; Xfce Team</name>
	<email>xfce@FreeBSD.org</email>
      </person>

      <person>
	<name>
	  <given>Olivier</given>
	  <common>Duchateau</common>
	</name>
	<email>duchateau.olivier@gmail.com</email>
      </person>
    </contact>

    <links>
      <url href="https://wiki.FreeBSD.org/Xfce">&os; Xfce Project</url>
      <url href="https://www.assembla.com/spaces/xfce4/subversion/source">Ports Development Repository</url>
    </links>

    <body>
      <p>Xfce is a free software desktop environment for Unix and
	Unix-like platforms such as &os;.  It aims to be fast and
	lightweight, while still being visually appealing and easy to
	use.</p>

      <p>During this quarter, we have kept these applications up-to-date:</p>

      <ul>
	<li><tt>audio/xfce4-pulseaudio-plugin</tt> (0.2.5, <a
	    href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=219357">PR219357</a>)</li>

	<li><tt>deskutils/xfce4-tumbler</tt> (0.1.32, <a
	    href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=219848">PR219848</a>)</li>

	<li><tt>deskutils/xfce4-xkb-plugin</tt> (0.8.0, <a
	    href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=220071">PR220071</a>)</li>

	<li><tt>sysutils/garcon</tt> (0.6.1, <a
	    href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=219928">PR219928</a>,
	  and <a
	    href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=219334">PR219334</a>
	  for <tt>Mk/Uses/xfce.mk</tt>)</li>

	<li><tt>textproc/xfce4-dict-plugin</tt> (0.8.0, <a
	    href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=220266">PR220266</a>)</li>

	<li><tt>x11/xfce4-terminal</tt> (0.8.5.1, <a
	    href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=219312">PR219312</a>)</li>

	<li><tt>x11/xfce4-whiskermenu-plugin</tt> (1.7.2, <a
	    href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=219347">PR219347</a>)</li>

	<li><tt>x11-wm/xfce4-desktop</tt> (4.12.4, <a
	    href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=220290">PR220290</a>)</li>
      </ul>

      <p>We have created new Subversion tag (<em>4.13</em>) in order
	to follow the unstable releases (due to changes in <tt>USES=
	xfce</tt> infrastucture, and not backward compatible new API
	in <tt>xfconf</tt>).  Ports following unstable release
	are:</p>

      <ul>
	<li><tt>deskutils/xfce4-tumbler</tt> (0.1.92.1)</li>

	<li><tt>multimedia/xfce4-parole</tt> (0.9.2)</li>

	<li><tt>sysutils/xfce4-settings</tt> (4.13.1)</li>

	<li><tt>x11/libexo</tt> (0.11.3)</li>

	<li><tt>x11/libxfce4menu</tt> (4.13.2)</li>

	<li><tt>x11/libxfce4util</tt> (4.13.1)</li>

	<li><tt>x11/xfce4-conf</tt> (4.13.2)</li>

	<li><tt>x11/xfce4-dashboard</tt> (0.7.2)</li>

	<li><tt>x11/xfce4-screenshooter</tt> (1.9.1)</li>

	<li><tt>x11/xfce4-whiskermenu-plugin</tt> (2.1.2)</li>

	<li><tt>x11-wm/xfce4-desktop</tt> (4.13.1)</li>

	<li><tt>x11-wm/xfce4-panel</tt> (4.13.0)</li>

	<li><tt>x11-wm/xfce4-session</tt> (4.13.0)</li>

	<li><tt>x11-wm/xfce4-wm</tt> (4.13.0)</li>
      </ul>
    </body>

    <help>
      <task>Make the transition to Gtk3 smoother for end users.</task>
    </help>
  </project>

  <project cat='ports'>
    <title>GNOME on &os;</title>

    <contact>
      <person>
	<name>&os; GNOME Team</name>
	<email>FreeBSD-gnome@FreeBSD.org</email>
      </person>
    </contact>

    <links>
      <url href="http://www.FreeBSD.org/gnome">&os; GNOME Website</url>
      <url href="https://github.com/&os;/FreeBSD-ports-gnome">Development Repository</url>
      <url href="https://wiki.gnome.org/Projects/Jhbuild/&os;">Upstream Build Bot</url>
      <url href="https://www.FreeBSD.org/doc/en_US.ISO8859-1/books/porters-handbook/using-gnome.html"><tt>USE_GNOME</tt> Porter's Handbook Chapter</url>
    </links>

    <body>
      <p>The &os; GNOME Team maintains the GNOME, MATE, and CINNAMON
	desktop environments and graphical user interfaces for &os;.
	GNOME 3 is part of the GNU Project.  MATE is a fork of the
	GNOME 2 desktop.  CINNAMON is a desktop environment using
	GNOME 3 technologies but with a GNOME 2 look and feel.</p>

      <p>After a period of not much activity, this quarter we
	started a little experiment in how we merge ports from the
	development repo to the &os; Ports Collection.  Instead of
	merging everything in one big commit, we have been updating
	the GNOME ports one at a time or in small groups.  For
	example, the GTK+ stack and the Evolution Suite were updated
	as groups, and all the gnome-games were done in one commit.
	It might be a bit more work preparing and testing the
	updates, but on the plus side, it easy to keep track of what
	is going on, and allows us to pay attention to the details.
	And it should be easier to commit smaller changes.</p>

      <p>This quarter started with the update of GTK+ 3 to 3.22.15,
	and the underlying libraries to their latest stable
	versions.  After the GTK+ update, work started on getting
	newer versions of other GNOME applications updated.</p>

      <p>The <tt>webkit2-gtk3</tt> port was first updated to the
	2.14 series and later to 2.16.3, which is the latest stable
	version.  This step was needed because 2.16 couldn't be
	built on &os;&nbsp;10.3 without some required framework
	changes.</p>

      <p><tt>harfbuzz-icu</tt> was split off from the main
	<tt>harfbuzz</tt> port.  This drops the heavy <tt>icu</tt>
	dependency from the main <tt>harfbuzz</tt> port.</p>

      <p>A longstanding GLib/<tt>gio</tt> bug was fixed that had
	previously caused crashes of <tt>gnome-shell</tt> and other
	applications when <tt>share/applications</tt> was modified,
	as happens on <tt>pkg install</tt> or
	<tt>deinstall</tt>.</p>

      <p>Many of these updates are based on work previously done in
	the Gnome development branch by Ruslan Makhmatkhanov, Gustau
	Perez and Koop Mast.</p>
    </body>

    <help>
      <task>Porting of Mutter/Gnome-shell/GDM 3.24 is complete.
	Unfortunately, GDM is blocking the update because of a
	&quot;handoff&quot; bug to the session after login.</task>

      <task>Fix the control-center printer sub menu.  As a
	workaround, <tt>system-config-printer</tt> can be used to
	configure printers.</task>

      <task>MATE 1.18 is being QA tested and should arrive in early
	July.</task>
    </help>
  </project>

  <project cat='ports'>
    <title>TensorFlow</title>

    <contact>
      <person>
	<name>
	  <given>Jov</given>
	</name>
	<email>amutu@amutu.com</email>
      </person>
    </contact>

    <links>
      <url href="https://bugs.FreeBSD.org/bugzilla/show_bug.cgi?id=219609">TensorFlow PR</url>
      <url href="https://reviews.FreeBSD.org/D11194">Phabricator Review</url>
      <url href="https://github.com/amutu/tf-FreeBSD-pkg">Prebuilt Packages</url>
      <url href="https://www.tensorflow.org">TensorFlow Upstream</url>
    </links>

    <body>
      <p>As described on its website, &quot;TensorFlow&trade; is an open
	source software library for numerical computation using data
	flow graphs.  Nodes in the graph represent mathematical
	operations, while the graph edges represent the
	multidimensional data arrays (tensors) communicated between
	them.  The flexible architecture allows you to deploy
	computation to one or more CPUs or GPUs in a desktop, server,
	or mobile device with a single API.  TensorFlow was originally
	developed by researchers and engineers working on the Google
	Brain Team within Google's Machine Intelligence research
	organization for the purposes of conducting machine learning
	and deep neural networks research, but the system is general
	enough to be applicable in a wide variety of other domains as
	well.&quot;</p>

      <p>TensorFlow now is the most popular platform/library for machine
	learning and AI.  There are official binaries for Linux, Mac,
	Windows, and Android, but no official support for &os;.  For
	the last several months, I have done some work to make
	TensorFlow available on &os;.  Some notable work:</p>

      <ul>
	<li>Patch <tt>bazel</tt> to not depend on <tt>/proc</tt> at
	  build time. <tt>bazel</tt> is a build tool made by Google.
	  It uses <tt>/proc</tt> to get path-to-self when building C++
	  code, but mounting <tt>/proc</tt> is usually not allowed
	  when building as an unprivileged user.</li>

	<li>TensorFlow can now be built on &os;&nbsp;10.x by using
	  <tt>clang38</tt> as the default <tt>bazel</tt> cross-build
	  tool.</li>

	<li>Patch the <tt>bazel</tt> workspace files to allow
	  TensorFlow to be built using offline third-party
	  dependencies.  This work is needed because the &os; Ports
	  framework does not allow network access except during the
	  fetch stage.</li>

	<li>Fix the build on &os; i386.</li>

	<li>Make TensorFlow build with either Python 2 or Python 3.</li>

	<li>Update to the latest version, which is
	  <tt>tensorflow</tt>-1.2.0.</li>
      </ul>

      <p>TensorFlow can now be run on &os; in CPU-only mode. Some
	functional tests have been performed on some combinations of
	&os; 10.3-RELEASE and 11.0-RELEASE, amd64 and i386, and
	Python 2.7 and Python 3.6.<p>

      <p>This port would not be possible without substantial
	assistance from bapt@, lwhsu@, mat@, and koobs@ &mdash; thank
	you for your advice, review, and help!  You are very nice
	and I learned a lot about &os; and the Ports framework from
	you.</p>
    </body>

    <help>
      <task>Review, test, comment, and most importantly, commit to the
	Ports Collection.</task>

      <task>Fix the OpenCL support on &os;.</task>

      <task>Port <tt>tensorflow-serving</tt>, which is a flexible,
	high-performance serving system for machine learning models
	produced by TensorFlow.</task>

      <task>Set up a CI for TensorFlow on &os; and give early notice
	to upstream when they break TensorFlow on &os;.</task>
    </help>
  </project>

  <project cat='proj'>
    <title>Ceph on &os;</title>

    <contact>
      <person>
	<name>
	  <given>Willem Jan</given>
	  <common>Withagen</common>
	</name>
	<email>wjw@digiware.nl</email>
      </person>
    </contact>

    <links>
      <url href="http://ceph.com">Ceph Main Site</url>
      <url href="https://github.com/ceph/ceph">Main Repository</url>
      <url href="https://github.com/wjwithagen/ceph">My &os; Fork </url>
    </links>

    <body>
      <p>Ceph is a distributed object store and file system designed to provide
	excellent performance, reliability and scalability.</p>

      <ul>
	<li><p>Object Storage</p>

	  <p>Ceph provides seamless access to objects using native
	    language bindings or <tt>radosgw</tt>, a REST interface
	    that is compatible with applications written for S3 and
	    Swift.</p></li>

	<li><p>Block Storage</p>

	  <p>Ceph's RADOS Block Device (RBD) provides access to block
	    device images that are striped and replicated across the
	    entire storage cluster.</p></li>

	<li><p>File System</p>

	  <p>Ceph provides a POSIX-compliant network file system that
	    aims for high performance, large data storage, and maximum
	    compatibility with legacy applications.</p></li>
      </ul>

      <p>I started looking into Ceph because the HAST solution with
	CARP and <tt>ggate</tt> did not really do what I was looking
	for.  But I aim to run a Ceph storage cluster of storage nodes
	that are running ZFS.  User stations would be running
	<tt>bhyve</tt> on RBD disks that are stored in Ceph.</p>

      <p>Compiling for &os; will now build most of the tools
	available in Ceph.</p>

      <p>The most important changes since the last report are:</p>

      <ul>
	<li>Ceph has releassed the release candidate of v12.1.0 (aka
	  Luminous); the corresponding packaging is sitting in my tree
	  waiting for Luminous to be actually released.</li>

	<li><tt>ceph-fuse</tt> works, and allows mounting of
	  <tt>cephfs</tt> filesystems.  The speed is not impressive,
	  but it does work.</li>

	<li><tt>rbd-ggate</tt> is available to create a Ceph
	  <tt>rdb</tt> backed device.  <tt>rbd-ggate</tt> was
	  submitted by Mykola Golub.  That works in a rather simple
	  fashion, once a cluster is functioning, with <tt>rdb
	  import</tt> and <tt>rdb-gate map</tt> creating
	  <tt>ggate</tt>-like devices backed by the Ceph cluster.</li>
      </ul>

      <p>Other improvements since the previous report:</p>

      <ul>
	<li>Some bugs in the <tt>init-ceph</tt> code (needed for
	  <tt>rc.d</tt>) are being fixed.</li>

	<li>RBD and rados are functioning.</li>

	<li>The needed compatability code was written so that &os; and
	  Linux daemons can operate together in a single cluster.</li>

	<li>More of the awkward dependancies on Linux-isms are deleted
	  &mdash;only <tt>/bin/bash</tt> is there to stay.</li>
      </ul>

      <p>Looking forward, the next official release of Ceph is called
	Luminous (v12.1.0).  As soon as it is available from upstream,
	a port will be made provided for &os;.</p>

      <p>To get things running on a &os; system, run <tt>pkg install
	  net/ceph-devel</tt> or clone <a
	  href="https://github.com/wjwithagen/ceph">https://github.com/wjwithagen/ceph</a>,
	check out the <tt>wip.freebsd.201707</tt> branch, and build
	manually by running <tt>./do_freebsd.sh</tt> in the checkout
	root.</p>

      <p>Parts not (yet) included:</p>

      <ul>
	<li>KRBD &mdash; but <tt>rbd-ggate</tt> is usable in its
	  stead</li>

	<li>BlueStore &mdash; &os; and Linux have different AIO APIs,
	  and that incompatibility needs to be resolved somehow.
	  Additionally, there is discussion in &os; about
	  <tt>aio_cancel</tt> not working for all device types.</li>
      </ul>
    </body>

    <help>
      <task>Run integration tests to see if the &os; daemons will work
	with a Linux Ceph platform.</task>

      <task>Investigate the keystore, which can be embedded in the
	kernel on Linux and currently prevents building Cephfs and
	some other parts.  The first question is whether it is really
	required, or only KRBD requires it.</task>

      <task>Scheduler information is not used at the moment, because the
	schedulers work rather differently between Linux and &os;.
	But at a certain point in time, this will need some attention
	(in <tt>src/common/Thread.cc</tt>).</task>

      <task>Improve the &os; init scripts in the Ceph stack, both for
	testing purposes and for running Ceph on production machines.
	Work on <tt>ceph-disk</tt> and <tt>ceph-deploy</tt> to make it
	more &os;- and ZFS-compatible.</task>

      <task>Build a test cluster and start running some of the
	teuthology integration tests on it.  Teuthology wants to build
	its own <tt>libvirt</tt> and that does not quite work with all
	the packages &os; already has in place.  There are many
	details to work out here.</task>

      <task>Design a vitual disk implementation that can be used with
	<tt>bhyve</tt> and attached to an RBD image.</task>
    </help>
  </project>
</report>
